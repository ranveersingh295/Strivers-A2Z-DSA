OPTIMAL APPROCH
Time Complexity: O(N), N = size of the given array.
Reason: We are using a single loop that runs for N times.
Space Complexity: O(1) as No extra data structures are used for computation.

class Solution {
    // Function to find maximum product subarray
    long maxProduct(int[] arr, int n) {
        // code here
        long pre = 1, suff = 1;
        long maxi = Integer.MIN_VALUE; // Corrected initialization
        for (int i = 0; i < n; i++) {
            if (pre == 0) pre = 1;
            if (suff == 0) suff = 1;
            pre *= arr[i];
            suff *= arr[n - i - 1];
            maxi = Math.max(maxi, Math.max(pre, suff));
        }
        return maxi;
    }
}
