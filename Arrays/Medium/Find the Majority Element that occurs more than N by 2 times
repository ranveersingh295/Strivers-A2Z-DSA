Optimal Approach: Mooreâ€™s Voting Algorithm:
Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the count and find the expected majority element. The second one is to check if the expected element is the majority one or not.
Note: If the question states that the array must contain a majority element, in that case, we do not need the second check. Then the time complexity will boil down to O(N).

class Solution
{
    static int majorityElement(int a[], int size)
    {
        // your code here
        int cnt = 0;
        int el =0;
        for(int i = 0;i<size;i++){
            if(cnt == 0){
                el = a[i];
                cnt++;
            }
            else if (a[i] == el) cnt++;
            else cnt--;
        }
        int cnt1 = 0;
        for(int i=0;i<size;i++){
            if(a[i] == el){
                cnt1 ++;
            }
            if(cnt1 > size/2){
                return el;
            }
        }
        return -1;
        
    }
}
