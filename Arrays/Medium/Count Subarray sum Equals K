OPTIMAL APPROACH
Time Complexity: O(N) or O(N*logN) depending on which map data structure we are using, where N = size of the array.
Reason: For example, if we are using an unordered_map data structure in C++ the time complexity will be O(N) but if we are using a map data structure, the time complexity will be O(N*logN). The least complexity will be O(N) as we are using a loop to traverse the array.
Space Complexity: O(N) as we are using a map data structure.

class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        HashMap<Integer, Integer> mpp = new HashMap<>();
        int count = 0;
        int presum = 0;
        mpp.put(0, 1);
        for (int i = 0; i < n; i++) {
            presum += nums[i];
            int rem = presum - k;
            count += mpp.getOrDefault(rem, 0);
            mpp.put(presum, mpp.getOrDefault(presum, 0) + 1);
        }
        return count;
    }
}
