OPTIMAL APPROACH
Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the counts and find the expected majority elements. The second one is to check if the calculated elements are the majority ones or not.
Space Complexity: O(1) as we are only using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.

class Solution {
    public List<Integer> majorityElement(int[] v) {
        int n = v.length;
        if (n == 0) {
            return new ArrayList<>(); 
        }
        int cnt1 = 0, cnt2 = 0;
        int el1 = 0, el2 = 0;
        for (int i = 0; i < n; i++) {
            if (cnt1 == 0 && (cnt2 == 0 || el2 != v[i])) {
                cnt1 = 1;
                el1 = v[i];
            } else if (cnt2 == 0 && el1 != v[i]) {
                cnt2 = 1;
                el2 = v[i];
            } else if (v[i] == el1) {
                cnt1++;
            } else if (v[i] == el2) {
                cnt2++;
            } else {
                cnt1--;
                cnt2--;
            }
        }
        cnt1 = 0;
        cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] == el1) {
                cnt1++;
            } else if (v[i] == el2) {
                cnt2++;
            }
        }
        ArrayList<Integer> ls = new ArrayList<>();
        int min = (n / 3) + 1;
        if (cnt1 >= min) {
            ls.add(el1);
        }
        if (cnt2 >= min && el1 != el2) { 
            ls.add(el2);
        }
        return ls;
    }
}
