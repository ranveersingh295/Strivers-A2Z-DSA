OPTIMAL APPROACH
Time Complexity: O(N) + O(N*logN), where N = size of the array.
Reason: The loop will run at most N times. And sorting the array will take N*logN time complexity.
Space Complexity: O(1) as we are not using any extra space.
Note: Here we are distorting the given array. So, if we need to consider this change, the space complexity will be O(N).
//for negative elements use HASHING

class Solution {
    boolean hasArrayTwoCandidates(int arr[], int n, int x) {
        // code here
        int left = 0, right = n-1;
        Arrays.sort(arr);
        while(left<right){
            int sum = arr[left]+arr[right];
            if(sum == x){
                return true;
            }
            else if (sum > x) right--;
            else left++;
            
        }
        return false;
    }
}
